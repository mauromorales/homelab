#cloud-config

hostname: "protos"

install:
  auto: true
  reboot: true
  device: auto
  grub_options:
    default_menu_entry: "Protos"

bundles:
  - targets:
      - run://quay.io/kairos/community-bundles:kairos-operator_latest
      - run://quay.io/kairos/community-bundles:k9s_latest

users:
  - name: "mauro"
    groups: ["admin"]
    ssh_authorized_keys: 
      - github:mauromorales

k0s:
  enabled: true
  args:
    - --enable-worker
    - --no-taints

stages:
  initramfs:
    - name: "Enable mDNS services to advertise hostname on local network"
      systemctl:
        enable:
          - avahi-daemon
    - name: "Generate k0s kubeconfig script"
      files:
        - path: /usr/local/bin/k0s-kubeconfig
          permissions: 0755
          owner: 0
          group: 0
          content: |
            #!/bin/sh
            echo "Checking if admin.conf exists and is not empty..."
            if [ ! -f "/var/lib/k0s/pki/admin.conf" ] || [ ! -s "/var/lib/k0s/pki/admin.conf" ]; then
              echo "Error: admin config '/var/lib/k0s/pki/admin.conf' not found or empty, check if the control plane is initialized on this node"
              exit 1
            fi
            echo "admin.conf found, proceeding with kubeconfig generation..."
            
            k0s kubeconfig admin > /etc/k0s/kubeconfig.yaml
            echo "/etc/k0s/kubeconfig.yaml generated, saving to root's .bashrc and external storage..."

            if ! grep -q '^export KUBECONFIG="/etc/k0s/kubeconfig.yaml"' /root/.bashrc 2>/dev/null; then
              echo "KUBECONFIG not found in root's .bashrc, adding it..."
              printf '\nexport KUBECONFIG="/etc/k0s/kubeconfig.yaml"\n' >> /root/.bashrc
            else
              echo "KUBECONFIG found in root's .bashrc, no need to add it"
            fi
            
            echo "Comparing KUBECONFIG with external storage..."
            
            # Check if the external storage endpoint is available
            if ! curl -s -f -o /tmp/external_kubeconfig.yaml http://epictetus.local:8080/api/storage/nodes/protos/kubeconfig.yaml; then
              echo "Warning: External storage server is not available (epictetus.local:8080)"
              echo "Skipping kubeconfig comparison and update"
              rm -f /tmp/external_kubeconfig.yaml
            else
              # Compare local kubeconfig with external storage
              if [ "$(cat /etc/k0s/kubeconfig.yaml)" != "$(cat /tmp/external_kubeconfig.yaml)" ]; then
                echo "KUBECONFIG differs from external storage, updating..."
                if curl -X POST -H "Content-Type: application/json" \
                  -d "$(jq -n --arg path "/nodes/protos/kubeconfig.yaml" --arg content "$(cat /etc/k0s/kubeconfig.yaml)" '{path: $path, content: $content}')" \
                  http://epictetus.local:8080/api/storage; then
                  echo "Successfully updated kubeconfig in external storage"
                else
                  echo "Error: Failed to update kubeconfig in external storage"
                fi
              else
                echo "KUBECONFIG is the same as external storage, no need to update"
              fi
              rm -f /tmp/external_kubeconfig.yaml
            fi

    - name: "Watch for k0s admin.conf changes"
      files:
        - path: /etc/systemd/system/k0s-kubeconfig.path
          permissions: 0644
          owner: 0
          group: 0
          content: |
            [Unit]
            Description=Watch for k0s admin.conf

            [Path]
            PathChanged=/var/lib/k0s/pki/admin.conf
            PathExists=/var/lib/k0s/pki/admin.conf

            [Install]
            WantedBy=multi-user.target
    - name: "Call k0s-kubeconfig script on k0s admin.conf changes"
      files:
        - path: /etc/systemd/system/k0s-kubeconfig.service
          permissions: 0644
          owner: 0
          group: 0
          content: |
            [Unit]
            Description=Generate k0s kubeconfig
            After=k0scontroller.service

            [Service]
            Type=oneshot
            RemainAfterExit=yes
            ExecStart=/usr/local/bin/k0s-kubeconfig
            Restart=on-failure
            RestartSec=30s
            StartLimitInterval=300s
            StartLimitBurst=10

            [Install]
            WantedBy=multi-user.target

    - name: "Enable k0s kubeconfig related units"
      commands:
        - ln -sf /etc/systemd/system/k0s-kubeconfig.path /etc/systemd/system/multi-user.target.wants/k0s-kubeconfig.path
        - ln -sf /etc/systemd/system/k0s-kubeconfig.service /etc/systemd/system/multi-user.target.wants/k0s-kubeconfig.service